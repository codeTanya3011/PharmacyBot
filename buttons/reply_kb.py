from aiogram.types import (ReplyKeyboardMarkup, KeyboardButtonPollType, KeyboardButton, ReplyKeyboardRemove)
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# TODO implements later
# # –ó–ê–ú–ï–¢–ö–ò

# def generate_main_menu() -> ReplyKeyboardMarkup:
#     builder = ReplyKeyboardBuilder()
#     builder.button(text="")
#     builder.button(text="")
#     builder.button(text="")
#     builder.button(text="")
#     builder.adjust(1, 3)
#
#     return builder.as_markup(resize_keyboard=True)
#
# del_kbd = ReplyKeyboardRemove()
#
# start_kb3 = ReplyKeyboardBuilder()
# start_kb3.add(
#     KeyboardButton(text="–°–∏–º–ø—Ç–æ–º—ã"),
#     KeyboardButton(text="–ü—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è"),
#     KeyboardButton(text="–õ–µ—á–µ–Ω–∏–µ"),
#     KeyboardButton(text="–î–µ—Ç—è–º"),
#     KeyboardButton(text="–û—Ç–∑—ã–≤—ã"),
#     KeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"),
# )
# start_kb3.adjust(2, 2, 2)

# button_symptoms = KeyboardButton(text="–°–∏–º–ø—Ç–æ–º—ã")
# keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
# keyboard.add(button_symptoms)

# start_kb3 = ReplyKeyboardBuilder()
# start_kb3.attach(start_kb2)
# start_kb3.row(KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"), )
#
# start_kb4 = ReplyKeyboardBuilder()
# start_kb4.attach(start_kb3)
# start_kb4.row(KeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"), )

# test_kb = ReplyKeyboardMarkup(
#     _keyboard=[
#         [
#             KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", request_poll=KeyboardButtonPollType()),
#         ],
#         [
#             KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä ‚òéÔ∏è", request_contact=True),
#             KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è", request_location=True),
#         ],
#     ],
#     resize_keyboard=True
# )
# from aiogram.types import KeyboardButton
# from aiogram.utils.keyboard import ReplyKeyboardBuilder, KeyboardBuilder
#
#
# def get_keyboard(
#         *btns: str,
#         placeholder: str = None,
#         request_contact: int = None,
#         request_location: int = None,
#         sizes: tuple[int] = (2,),
# ):

#     keyboard = ReplyKeyboardBuilder()
#
#     for index, text in enumerate(btns, start=0):
#
#         if request_contact and request_contact == index:
#             keyboard.add(KeyboardButton(text=text, request_contact=True))
#
#         elif request_location and request_location == index:
#             keyboard.add(KeyboardButton(text=text, request_location=True))
#         else:
#             keyboard.add(KeyboardButton(text=text))
#
#     return keyboard.adjust(*sizes).as_markup(
#         resize_keyboard=True, input_field_placeholder=placeholder)

# –õ–æ–≥–∏–∫–∞ –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤–æ–∑–º–æ–∂–Ω–æ –¥–ª—è —Ñ–∞–π–ª–∞ —é–∑–µ—Ä

# # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É

# elif callback_query.data == "show_reviews":
#     await callback_query.message.answer("–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –≤—Å–µ –ø—Ä–æ—à–ª–æ –æ—Ç–ª–∏—á–Ω–æ!")
#
# elif callback_query.data == "show_feedback":
#     await callback_query.message.answer("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")
#
# await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback

# @user_private_router.message(F.contact)
# async def get_contact(message: types.Message):
#     await message.answer(f"–Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω")
#     await message.answer(str(message.contact))
#
#
# @user_private_router.message(F.location)
# async def get_location(message: types.Message):
#     await message.answer(f"–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
#     await message.answer(str(message.location))
